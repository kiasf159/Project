// make control class & data class 
#include "pch.h"
#include <iostream>
#include <cstring>
#pragma warning(disable:4996)
using namespace std;
const int NAME_LEN = 20;

enum { MAKE = 1, DEPOSIT, WITHDRAW, INQUIRE, EXIT };

//Data Class = Entity Class
class Account
{
private:
	int accID;
	int balance;
	char *cusName;
public:
	Account(int ID, int money, char *name);
	Account(const Account &ref);

	int GetAccID() const;
	void Deposit(int money);
	int Withdraw(int money);
	void ShowAccInfo() const;
	~Account();
};

Account::Account(int ID, int money, char *name)
	:accID(ID), balance(money)
{
	cusName = new char[strlen(name) + 1];
	strcpy(this->cusName, name);
}
Account::Account(const Account &ref)
	: accID(ref.accID), balance(ref.balance)
{
	cusName = new char[strlen(ref.cusName) + 1];
	strcpy(this->cusName, ref.cusName);
}
int Account::GetAccID() const
{
	return accID;
}

void Account::Deposit(int money)
{
	balance = balance + money;
}

int Account::Withdraw(int money)
{
	if (balance < money)
		return 0;
	balance = balance - money;
	return money;
}

void Account::ShowAccInfo() const
{
	cout << "Accout ID : " << accID << endl;
	cout << "Name : " << cusName << endl;
	cout << "Balance : " << balance << endl;
}

Account::~Account()
{
	delete[]cusName;
}

//Control Class
class AccountHandler
{
private:
	Account *accArr[100];
	int accNum;
public:
	AccountHandler();
	void ShowMenu(void) const;
	void Make_Account();
	void Deposit_Money();
	void Withdraw_Money();
	void Account_Information_Output() const;
	~AccountHandler();
};

void AccountHandler::ShowMenu(void) const
{
	cout << "-----Menu------" << endl;
	cout << "1. Opening an Account" << endl;
	cout << "2. Deposit" << endl;
	cout << "3. Withdrawal" << endl;
	cout << "4. Print out Account Information" << endl;
	cout << "5. Program Close." << endl;
}

void AccountHandler::Make_Account()
{
	int id;
	char name[NAME_LEN];
	int balance;

	cout << "[Opening an Account]" << endl;
	cout << "Account ID : ";
	cin >> id;
	cout << "Name : ";
	cin >> name;
	cout << "Deposit money : ";
	cin >> balance;
	cout << endl;

	accArr[accNum++] = new Account(id, balance, name);
}

void AccountHandler::Deposit_Money()
{
	int money;
	int id;
	cout << "[Deposit Corner]" << endl;
	cout << "Account ID : ";
	cin >> id;
	cout << "Deposit money : ";
	cin >> money;

	for (int i = 0; i < accNum; i++)
	{
		if (accArr[i]->GetAccID() == id)
		{
			accArr[i]->Deposit(money);
			cout << "Deposit Complete" << endl;
			return;
		}
	}
	cout << "It's not found. " << endl;
}

void AccountHandler::Withdraw_Money()
{
	int money;
	int id;
	cout << "[Withdrawal]" << endl;
	cout << "Account ID : ";
	cin >> id;
	cout << "Withdrawal money : ";
	cin >> money;

	for (int i = 0; i < accNum; i++)
	{
		if (accArr[i]->GetAccID() == id)
		{
			if (accArr[i]->Withdraw(money) == 0)
			{
				cout << "Balance Shortage.." << endl;
				return;
			}
			cout << "Withdrawal Complete" << endl;
			return;
		}
	}
	cout << "It's not found." << endl;
}

AccountHandler::AccountHandler()
	: accNum(0)
{  }

void AccountHandler::Account_Information_Output() const
{
	for (int i = 0; i < accNum; i++)
	{
		accArr[i]->ShowAccInfo();
		cout << endl;
	}
}

AccountHandler::~AccountHandler()
{
	for (int i = 0; i < accNum; i++)
		delete accArr[i];
}

int main()
{
	AccountHandler manager;
	int choice;

	while (1)
	{
		manager.ShowMenu();
		cout << "Choice : ";
		cin >> choice;
		cout << endl;

		switch (choice)
		{
		case MAKE:
			manager.Make_Account();
			break;
		case DEPOSIT:
			manager.Deposit_Money();
			break;
		case WITHDRAW:
			manager.Withdraw_Money();
			break;
		case INQUIRE:
			manager.Account_Information_Output();
			break;
		case EXIT:
			return 0;
		default:
			cout << "illegal selection..." << endl;
		}
	}
	return 0;
}
